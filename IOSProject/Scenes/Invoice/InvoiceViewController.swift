//
//  InvoiceViewController.swift
//  IOSProject
//
//  Created by Jason Barrios on 3/19/19.
//  Copyright (c) 2019 Jason Barrios. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol InvoiceDisplayLogic: class {
    func displayDataSource(viewModel: Invoice.DataSource.ViewModel)
}

class InvoiceViewController: UIViewController, InvoiceDisplayLogic {
    
    var interactor: InvoiceBusinessLogic?
    var router: (NSObjectProtocol & InvoiceRoutingLogic & InvoiceDataPassing)?
    //private let customCellIdentifier = "CustomInvoiceTableViewCell"

    // MARK: IBOutlets
    
    @IBOutlet weak var tableView: UITableView!
    
    var dataSource = [Invoice.DataSource.ViewModel.DisplayedItem]()
    public var username: String?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = InvoiceInteractor()
        let presenter = InvoicePresenter()
        let router = InvoiceRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        registerCustomCell()
        print("Invoice \(String(describing: username))")
        requestDataSource(username: username ?? "")
    }
    
//    func registerCustomCell() {
//        let nib = UINib(nibName: customCellIdentifier, bundle: nil)
//        tableView.register(nib, forCellReuseIdentifier: customCellIdentifier)
//    }
    
    
    // MARK: Request logic
    func requestDataSource(username: String) {
        
        //let request = Invoice.DataSource.Request.init(username: username)
        interactor?.requestDataSource(username: username)
    }
    
    
    // MARK: Display logic
    func displayDataSource(viewModel: Invoice.DataSource.ViewModel) {
        dataSource = viewModel.displayedItems
        tableView.reloadData()
        
    }
}


extension InvoiceViewController: UITableViewDataSource, UITableViewDelegate {
    func registerCustomCell() {
        tableView.register(UINib(resource: R.nib.customInvoiceTableViewCell), forCellReuseIdentifier: R.nib.customInvoiceTableViewCell.name)
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: R.nib.customInvoiceTableViewCell.name) as? CustomInvoiceTableViewCell else {
            return UITableViewCell()
        }
        cell.setupCell(item: dataSource[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.goToNextView(indexPath: indexPath)
    }
}
