//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `Kuko`.
    static let kuko = Rswift.ImageResource(bundle: R.hostingBundle, name: "Kuko")
    /// Image `customer`.
    static let customer = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer")
    /// Image `invoice`.
    static let invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "invoice")
    
    /// `UIImage(named: "Kuko", bundle: ..., traitCollection: ...)`
    static func kuko(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kuko, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "customer", bundle: ..., traitCollection: ...)`
    static func customer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "invoice", bundle: ..., traitCollection: ...)`
    static func invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invoice, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `CustomCustomerTableViewCell`.
    static let customCustomerTableViewCell = _R.nib._CustomCustomerTableViewCell()
    /// Nib `CustomInvoiceTableViewCell`.
    static let customInvoiceTableViewCell = _R.nib._CustomInvoiceTableViewCell()
    
    /// `UINib(name: "CustomCustomerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customCustomerTableViewCell) instead")
    static func customCustomerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customCustomerTableViewCell)
    }
    
    /// `UINib(name: "CustomInvoiceTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customInvoiceTableViewCell) instead")
    static func customInvoiceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customInvoiceTableViewCell)
    }
    
    static func customCustomerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomCustomerTableViewCell? {
      return R.nib.customCustomerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomCustomerTableViewCell
    }
    
    static func customInvoiceTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomInvoiceTableViewCell? {
      return R.nib.customInvoiceTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomInvoiceTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _CustomCustomerTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomCustomerTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomCustomerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomCustomerTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CustomInvoiceTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomInvoiceTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomInvoiceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomInvoiceTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try login.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let customDetailViewController = StoryboardViewControllerResource<CustomDetailViewController>(identifier: "CustomDetailViewController")
      let customTabBarViewController = StoryboardViewControllerResource<CustomTabBarViewController>(identifier: "CustomTabBarViewController")
      let customerViewController = StoryboardViewControllerResource<CustomerViewController>(identifier: "CustomerViewController")
      let invoiceDetailViewController = StoryboardViewControllerResource<InvoiceDetailViewController>(identifier: "InvoiceDetailViewController")
      let invoiceViewController = StoryboardViewControllerResource<InvoiceViewController>(identifier: "InvoiceViewController")
      let name = "Login"
      
      func customDetailViewController(_: Void = ()) -> CustomDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customDetailViewController)
      }
      
      func customTabBarViewController(_: Void = ()) -> CustomTabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customTabBarViewController)
      }
      
      func customerViewController(_: Void = ()) -> CustomerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customerViewController)
      }
      
      func invoiceDetailViewController(_: Void = ()) -> InvoiceDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invoiceDetailViewController)
      }
      
      func invoiceViewController(_: Void = ()) -> InvoiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invoiceViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Kuko", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Kuko' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.login().customDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customDetailViewController' could not be loaded from storyboard 'Login' as 'CustomDetailViewController'.") }
        if _R.storyboard.login().customTabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customTabBarViewController' could not be loaded from storyboard 'Login' as 'CustomTabBarViewController'.") }
        if _R.storyboard.login().customerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customerViewController' could not be loaded from storyboard 'Login' as 'CustomerViewController'.") }
        if _R.storyboard.login().invoiceDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invoiceDetailViewController' could not be loaded from storyboard 'Login' as 'InvoiceDetailViewController'.") }
        if _R.storyboard.login().invoiceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invoiceViewController' could not be loaded from storyboard 'Login' as 'InvoiceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
